---
export interface Props {
  courseId: string;
  courseTitle: string;
  price: number;
  userId: string;
  userEmail: string;
}

const { courseId, courseTitle, price, userId, userEmail } = Astro.props;
---

<div class="paypal-checkout-container">
  <div id="paypal-button-container" class="mb-4"></div>
  <div id="purchase-status" class="text-sm text-center"></div>
</div>

<script>
  import { supabase } from '~/lib/supabase';

  // PayPal configuration
  const paypalConfig = {
    courseId: '${courseId}',
    courseTitle: '${courseTitle}',
    price: ${price},
    userId: '${userId}',
    userEmail: '${userEmail}'
  };

  // Initialize PayPal buttons
  function initializePayPal() {
    if (typeof paypal === 'undefined') {
      console.error('PayPal SDK not loaded');
      return;
    }

    paypal.Buttons({
      createOrder: function(data, actions) {
        return createPayPalOrder();
      },
      onApprove: function(data, actions) {
        return handlePayPalApproval(data);
      },
      onError: function(err) {
        console.error('PayPal error:', err);
        updateStatus('Payment failed. Please try again.', 'error');
      }
    }).render('#paypal-button-container');
  }

  // Create PayPal order
  async function createPayPalOrder() {
    try {
      updateStatus('Creating order...', 'info');
      
      const response = await fetch('/api/create-paypal-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(paypalConfig)
      });

      const result = await response.json();
      
      if (result.error) {
        throw new Error(result.error);
      }

      updateStatus('Order created successfully!', 'success');
      return result.orderId;
    } catch (error) {
      console.error('Create order error:', error);
      updateStatus('Failed to create order. Please try again.', 'error');
      throw error;
    }
  }

  // Handle PayPal approval
  async function handlePayPalApproval(data) {
    try {
      updateStatus('Processing your payment...', 'info');
      
      // In a real implementation, you would capture the payment here
      // For now, we'll simulate success
      setTimeout(() => {
        updateStatus('Payment successful! Redirecting to dashboard...', 'success');
        
        setTimeout(() => {
          window.location.href = '/dashboard';
        }, 2000);
      }, 2000);

    } catch (error) {
      console.error('Payment approval error:', error);
      updateStatus('Payment processing failed. Please contact support.', 'error');
    }
  }

  // Update status display
  function updateStatus(message, type) {
    const statusElement = document.getElementById('purchase-status');
    if (!statusElement) return;

    const colors = {
      info: 'text-blue-400',
      success: 'text-green-400',
      error: 'text-red-400'
    };

    statusElement.innerHTML = `<p class="${colors[type] || 'text-gray-400'}">${message}</p>`;
  }

  // Initialize when PayPal SDK is loaded
  if (typeof paypal !== 'undefined') {
    initializePayPal();
  } else {
    // Wait for PayPal SDK to load
    window.addEventListener('load', function() {
      if (typeof paypal !== 'undefined') {
        initializePayPal();
      }
    });
  }
</script>

<style>
  .paypal-checkout-container {
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
  }
</style> 