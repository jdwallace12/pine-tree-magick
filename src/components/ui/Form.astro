---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { 
  inputs, 
  textarea, 
  disclaimer, 
  button = 'Contact us', 
  description = '',
  redirectUrl = '',
  formName = 'contact'
} = Astro.props;
---

<form 
  name={formName}
  method="POST"
  data-netlify="true"
  netlify-honeypot="bot-field"
  class="needs-validation form-component"
>
  <input type="hidden" name="form-name" value={formName} />
  <p class="hidden">
    <label>
      Don't fill this out if you're human: <input name="bot-field" />
    </label>
  </p>

  {inputs && inputs.map(({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', value }) =>
    name && (
      <div class="mb-6">
        {label && (
          <label for={name} class="block text-sm font-medium mb-2">
            {label} <span class="text-primary">*</span>
          </label>
        )}
        <input
          type={type}
          name={name}
          id={name}
          autocomplete={autocomplete}
          placeholder={placeholder}
          required
          minlength={type === 'text' ? "2" : undefined}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-600 bg-white dark:bg-dark"
          value={value}
        />
      </div>
    )
  )}

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium mb-2">
          {textarea.label} <span class="text-primary">*</span>
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required
          minlength="10"
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-600 bg-white dark:bg-dark"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label} <span class="text-red-600">*</span>
          </label>
        </div>
      </div>
    )
  }

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }

  <!-- Add these elements for messages -->
  <div class="mt-4 hidden text-center" data-form-message>
    <p class="text-green-600 dark:text-green-400 hidden" data-success-message>
      {formName === 'freebie-download' 
        ? 'Form submitted successfully! Your download will begin shortly...'
        : 'Message sent successfully! We\'ll get back to you soon.'}
    </p>
    <p class="text-red-600 dark:text-red-400 hidden" data-error-message>
      There was an error submitting the form. Please try again.
    </p>
  </div>
</form>

<script define:vars={{ redirectUrl, formName }}>
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.form-component');
    
    forms.forEach(form => {
      const messageContainer = form.querySelector('[data-form-message]');
      const successMessage = form.querySelector('[data-success-message]');
      const errorMessage = form.querySelector('[data-error-message]');

      const showMessage = (type) => {
        messageContainer.classList.remove('hidden');
        if (type === 'success') {
          successMessage.classList.remove('hidden');
          errorMessage.classList.add('hidden');
        } else {
          errorMessage.classList.remove('hidden');
          successMessage.classList.add('hidden');
        }
      };

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Hide any existing messages
        messageContainer.classList.add('hidden');
        
        const formData = new FormData(e.target);
        formData.append('form-name', formName);
        
        try {
          const response = await fetch('/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: new URLSearchParams(formData).toString()
          });
          
          if (response.ok) {
            showMessage('success');
            
            // Wait a moment before redirecting
            setTimeout(() => {
              if (redirectUrl) {
                window.open(redirectUrl, '_blank');
              }
            }, 1500);
            
            e.target.reset();
          } else {
            showMessage('error');
          }
        } catch (error) {
          console.error('Error submitting form:', error);
          showMessage('error');
        }
      });
    });
  });
</script>
